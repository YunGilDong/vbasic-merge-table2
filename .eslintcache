[{"D:\\Project_gitlab\\vbasic-merge-table2\\src\\index.js":"1","D:\\Project_gitlab\\vbasic-merge-table2\\src\\App.js":"2","D:\\Project_gitlab\\vbasic-merge-table2\\src\\reportWebVitals.js":"3","D:\\Project_gitlab\\vbasic-merge-table2\\src\\component\\vBasicMergeTable.js":"4","D:\\Project_gitlab\\vbasic-merge-table2\\src\\component\\CellComp.js":"5"},{"size":517,"mtime":1612141127306,"results":"6","hashOfConfig":"7"},{"size":10116,"mtime":1614756985492,"results":"8","hashOfConfig":"7"},{"size":375,"mtime":1612141127307,"results":"9","hashOfConfig":"7"},{"size":21238,"mtime":1614757388432,"results":"10","hashOfConfig":"7"},{"size":15411,"mtime":1614646958363,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"31zxcw",{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"D:\\Project_gitlab\\vbasic-merge-table2\\src\\index.js",[],["24","25"],"D:\\Project_gitlab\\vbasic-merge-table2\\src\\App.js",["26","27","28"],"D:\\Project_gitlab\\vbasic-merge-table2\\src\\reportWebVitals.js",[],"D:\\Project_gitlab\\vbasic-merge-table2\\src\\component\\vBasicMergeTable.js",["29","30","31","32","33","34","35","36","37","38","39","40"],"D:\\Project_gitlab\\vbasic-merge-table2\\src\\component\\CellComp.js",["41","42","43","44","45","46","47","48","49","50"],"import React from \"react\";\r\nimport \"./BasicTable.scss\";\r\n\r\nexport class Sg3TxtField extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.valueArr = [\"0\", \"0\"];\r\n        this.state = {\r\n            row: props.row,\r\n            colIdx: props.colIdx,\r\n            colKey: props.colKey,\r\n            cellType: props.cellType,\r\n            value: props.value,\r\n        }\r\n\r\n        this.value = props.value;\r\n\r\n        this.propValue = props.value;\r\n        this.stateValue = props.value;\r\n\r\n        //console.log(\"sgtxtField cost: \", this.state);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        // this.props.cellPos 이랑, row, colIdx가 같으면 input focus\r\n        if(typeof this.props.tableActive!=\"undefined\" && !this.props.tableActive){\r\n            return;\r\n        }\r\n        if(Array.isArray(this.props.cellPos) &&  this.props.cellPos[0]===this.state.row && this.props.cellPos[1]===this.state.colIdx) {\r\n            this.props.refVal.current.focus();\r\n        }        \r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        // prop value save\r\n        // this.propValue =  nextProps.value;\r\n\r\n        // if(this.state.row === 0 && this.state.colIdx === 5) {\r\n        //     console.log(\"cellval : \", nextProps.value, this.props.value, nextState);\r\n        //     console.log(\"cellval : \", nextProps.isWritePropValue, this.props.isWritePropValue, nextState);\r\n        // }\r\n\r\n        // if(nextProps.isWritePropValue) {            \r\n        \r\n        //     // prop으로 써야할 경우 state Value를 prop Value로 초기화\r\n        //     this.value = this.propValue;\r\n        //     this.stateValue = this.propValue;        \r\n        //     if(nextProps.value===this.props.value) {\r\n        //         if(nextProps.cellPos[0]===this.state.row && nextProps.cellPos[1] === this.state.colIdx) {\r\n        \r\n        //             return true;\r\n        //         }\r\n        //         // else {\r\n        //         //     return false;\r\n        //         // }\r\n        //     }\r\n        //     return true;\r\n        // }\r\n        // else {\r\n        \r\n        //     this.value = this.stateValue;\r\n        //     if(nextState.value === this.state.value) {\r\n        //         if(nextProps.cellPos[0]===this.state.row && nextProps.cellPos[1] === this.state.colIdx) {\r\n        //             return true;\r\n        //         }\r\n        //         // else {\r\n        //         //     return false;\r\n        //         // }\r\n        //     }\r\n        // }\r\n\r\n        return true;\r\n    }\r\n\r\n    onKeyDown = (e) => {\r\n        if (e.key >= 0 && e.key <= 9) {\r\n            // number\r\n            let tempHighVal = this.valueArr[1];\r\n            let lowVal = e.key;\r\n            this.valueArr = [tempHighVal, lowVal];\r\n    \r\n            const {row, colIdx} = this.state;\r\n            let hexVal = this.valueArr[0] + this.valueArr[1];\r\n            let decVal = parseInt(hexVal, 16); \r\n            \r\n            // 편집모드만 setState\r\n            if(!this.props.isWritePropValue) {\r\n                this.setState({\r\n                    value: decVal,\r\n                })\r\n                this.stateValue = decVal;\r\n            }            \r\n\r\n            if(typeof this.props.updateTableData!=\"undefined\") {\r\n                this.props.updateTableData(row, colIdx, decVal);\r\n            }\r\n        }\r\n    \r\n        if (e.key === \"w\" || e.key === \"W\") {\r\n            // up\r\n            if (typeof this.props.onMoveRow != \"undefined\") {\r\n                this.props.onMoveRow(-1, this.props.colIdx);\r\n            }\r\n        } else if (e.key === \"s\" || e.key === \"S\") {\r\n        // down\r\n            if (typeof this.props.onMoveRow != \"undefined\") {\r\n                this.props.onMoveRow(1, this.props.colIdx);\r\n            }\r\n        } else if (e.key === \"a\") {\r\n          // left\r\n            if (typeof this.props.onMoveCol != \"undefined\") {\r\n                this.props.onMoveCol(-1, this.props.colIdx);\r\n             }\r\n        } else if (e.key === \"d\") {\r\n          // right\r\n            if (typeof this.props.onMoveCol != \"undefined\") {\r\n                this.props.onMoveCol(1, this.props.colIdx);\r\n            }\r\n        }\r\n    }\r\n\r\n    checkRenderValue = () => {\r\n        // prop value save\r\n        this.propValue =  this.props.value;\r\n\r\n        if(this.state.row === 0 && this.state.colIdx === 5) {\r\n            console.log(\"cellval1 : \", this.props.value, this.state);\r\n            console.log(\"cellval2 : \", this.props.isWritePropValue);\r\n        }\r\n\r\n        if(this.props.isWritePropValue) {            \r\n        \r\n            // prop으로 써야할 경우 state Value를 prop Value로 초기화\r\n            this.value = this.propValue;\r\n            this.stateValue = this.propValue;        \r\n            if(this.props.value===this.props.value) {\r\n                if(Array.isArray(this.props.cellPos) && this.props.cellPos[0]===this.state.row && this.props.cellPos[1] === this.state.colIdx) {        \r\n                    return true;\r\n                }\r\n              \r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            this.value = this.stateValue;\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    render() {\r\n        // 렌더링할 value 체크\r\n        this.checkRenderValue();\r\n\r\n        //console.log(\"sgtxtField render: \", this.state.row, this.state.colKey, this.value, this.props.isWritePropValue);\r\n\r\n        let valueHex = \"00\";\r\n\r\n        let value = this.value;\r\n        // if(this.props.isWritePropValue) {\r\n        //     value = this.props.value;\r\n        // }\r\n        // else {\r\n        //     value = this.state.value;\r\n        // }\r\n        \r\n        valueHex = value.toString(16).padStart(2, \"0\");\r\n        \r\n        let firCh = valueHex.substring(0, 1);\r\n        let secCh = valueHex.substring(1, 2);\r\n        let firBg = \"\";\r\n        let secBg = \"\";\r\n\r\n        if (firCh === \"1\" || firCh === \"5\")       firBg = \"green 50%\";\r\n        else if (firCh === \"2\" || firCh === \"3\")  firBg = \"yellow 50%\";\r\n        else if (firCh === \"8\")                   firBg = \"gray 50%\";\r\n        else if (firCh === \"0\")                   firBg = \"white 50%\";\r\n        \r\n\r\n        if (secCh === \"1\" || secCh === \"5\")       secBg = \"green 50%\";\r\n        else if (secCh === \"2\" || secCh === \"3\")  secBg = \"yellow 50%\";\r\n        else if (secCh === \"8\")                   secBg = \"gray 50%\";\r\n        else if (secCh === \"0\")                   secBg = \"white 50%\";\r\n    \r\n        let refVal;\r\n        if(typeof this.props.refVal != \"undefined\") {\r\n            refVal = this.props.refVal;\r\n        }\r\n\r\n        let cellPos = this.props.cellPos;\r\n        //console.log(\"cellPos : \", cellPos, this.props.row, this.props.colIdx);\r\n\r\n\r\n        let element = <div className=\"tTxt2\" ref={refVal} style={{ background: `linear-gradient(90deg, ${firBg}, ${secBg})` }} onKeyDown={this.onKeyDown}>{valueHex} </div>\r\n        if(typeof this.props.cellPos != \"undefiend\") {     \r\n            if(Array.isArray(cellPos) && cellPos[0]===this.props.row && cellPos[1]===this.props.colIdx) {\r\n\r\n                element = <input\r\n                    ref={refVal}\r\n                    type=\"text\"\r\n                    className=\"tTxt2\"                    \r\n                    style={{ background: `linear-gradient(90deg, ${firBg}, ${secBg})` }}\r\n                    readOnly\r\n                    value={valueHex}\r\n                    onKeyDown={this.onKeyDown}\r\n                    />\r\n            }            \r\n        }\r\n        else {\r\n            console.log(\"undefined..\", cellPos, this.props.row, this.props.colIdx);\r\n            if(Array.isArray(cellPos) &&  cellPos[0]===this.props.row && cellPos[1]===this.props.colIdx) {    \r\n                console.log(\"selected sg3:\", cellPos);\r\n                element = <input\r\n                            ref={refVal}\r\n                            type=\"text\"\r\n                            className=\"tTxt2\"\r\n                            style={{ background: `linear-gradient(90deg, ${firBg}, ${secBg})` }}\r\n                            readOnly\r\n                            value={valueHex}\r\n                            onKeyDown={this.onKeyDown}\r\n                        />\r\n            }\r\n        }\r\n        \r\n        return(\r\n            <div>\r\n                {element}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class ChkBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            checked: props.checked,\r\n            row: props.row,\r\n            colKey: props.colKey,\r\n            cellType: props.cellType,\r\n        }\r\n\r\n        this.checked = false;\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        // value가 다를경우만 render!\r\n\r\n        if(nextProps.isWritePropValue) {\r\n            // this.setState({\r\n            //     checked: this.props.checked,\r\n            // })\r\n            this.checked = nextProps.checked;            \r\n\r\n            return true;\r\n        }\r\n        else {\r\n            this.checked = nextState.checked;            \r\n            \r\n            // value가 다를경우만 render!\r\n            if(nextState.checked === this.state.checked) {\r\n                return false;\r\n            }            \r\n        }\r\n\r\n        return true;        \r\n    }\r\n\r\n    onChange = (e) => {\r\n\r\n        if(e.target.checked != this.state.checked) {\r\n            this.setState({\r\n                checked: e.target.checked,\r\n            })\r\n        }\r\n\r\n        const {row, colKey} = this.state;\r\n        if(typeof this.props.updateTableData!=\"undefined\") {\r\n            this.props.updateTableData(row, colKey, e.target.checked);\r\n        }\r\n    }\r\n\r\n    render() {      \r\n        return (\r\n            <input type=\"checkbox\" checked={this.checked} onChange={this.onChange} />\r\n        )        \r\n    }\r\n}\r\n\r\nexport class NumberField extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            row: props.row,\r\n            colKey: props.colKey,\r\n            initValue: props.value,\r\n            value: props.value,\r\n            cellType: props.cellType,\r\n        }\r\n\r\n        this.value = props.value;\r\n\r\n        \r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {       \r\n\r\n        if(nextProps.isWritePropValue) {\r\n            // this.setState({\r\n            //     value: this.props.value,\r\n            // })\r\n            this.value = nextProps.value;            \r\n\r\n            return true;\r\n        }\r\n        else {\r\n            this.value = nextState.value;            \r\n            \r\n            // value가 다를경우만 render!\r\n            if(nextState.value === this.state.value) {\r\n                return false;\r\n            }\r\n            \r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        //props이 바뀌면 state update        \r\n\r\n        if(prevProps.value != this.props.value) {\r\n             this.setState({\r\n                 value: this.props.value,\r\n             })\r\n         } \r\n    }\r\n  \r\n    onKeyDown = (e) => {    \r\n        if(e.keyCode<48 && e.keyCode > 57){\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            value: e.target.value,\r\n        })\r\n\r\n        console.log(\"onKeyDown:\", e.target.value);\r\n  \r\n        const {row, colKey, value} = this.state;\r\n        // update props data (row, col)\r\n        if(typeof this.props.updateTableData!=\"undefined\") {\r\n            //console.log(\"field : \", row, colIdx, value);\r\n            this.props.updateTableData(row, colKey, e.target.value);\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {     \r\n\r\n        if(e.target.value != this.state.value) {\r\n            this.setState({\r\n                value: e.target.value,\r\n            })\r\n        }\r\n        \r\n        console.log(\"e.target.value : \", e.target.value)\r\n        const {row, colKey, value} = this.state;\r\n        // update props data (row, col)\r\n        if(typeof this.props.updateTableData!=\"undefined\") {\r\n            //console.log(\"field : \", row, colIdx, value);\r\n            this.props.updateTableData(row, colKey, e.target.value);\r\n        }\r\n    }\r\n    onChange2 = (e) => {     \r\n    }\r\n  \r\n    render() {\r\n  \r\n      return (\r\n        // <input type=\"text\" className=\"tTxt2\" value={this.value} onKeyDown={this.onKeyDown}  onChange={this.onChange} />\r\n\r\n        // remove spin button (in scss style)\r\n        <input type=\"number\" className=\"tTxt2\" value={this.value} onChange={this.onChange} />\r\n      )\r\n    }\r\n}\r\n\r\nclass TextField extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            row: props.row,\r\n            colIdx: props.colIdx,\r\n            colKey: props.colKey,\r\n            value: props.value,\r\n            cellType: props.cellType,\r\n        }\r\n        this.value = props.value;\r\n        this.propValue = props.value;\r\n        this.stateValue = props.value;\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        // value가 다를경우만 render!\r\n        // if(nextProps.isWritePropValue) {\r\n        //     // this.setState({\r\n        //     //     value: this.props.value,\r\n        //     // })\r\n        //     this.value = nextProps.value; \r\n\r\n        //     return true;\r\n        // }\r\n        // else {\r\n        //     this.value = nextState.value;            \r\n            \r\n        //     // value가 다를경우만 render!\r\n        //     if(nextState.value === this.state.value) {\r\n        //         return false;\r\n        //     }\r\n        // }\r\n\r\n        return true;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        //props이 바뀌면 state update        \r\n\r\n        if(prevProps.value != this.props.value) {\r\n             this.setState({\r\n                 value: this.props.value,\r\n             })\r\n         } \r\n    }\r\n\r\n    onChange = (e) => {\r\n\r\n        if(e.target.value != this.state.value) {\r\n\r\n            // 편집모드만 setState\r\n            if(!this.props.isWritePropValue) {\r\n                this.setState({\r\n                    value: e.target.value,\r\n                })\r\n                this.stateValue = e.target.value;\r\n            }\r\n        }\r\n        \r\n        const {row, colKey, value} = this.state;\r\n        // update props data (row, col)\r\n        if(typeof this.props.updateTableData!=\"undefined\") {\r\n            this.props.updateTableData(row, colKey, e.target.value);\r\n        }\r\n    }\r\n\r\n    checkRenderValue = () => {\r\n        // prop value save\r\n        this.propValue =  this.props.value;\r\n\r\n        if(this.state.row === 0 && (this.state.colIdx === 17 || this.state.colIdx === 18)) {\r\n            console.log(\"cellTxtval1 : \", this.props.value, this.state);\r\n            console.log(\"cellTxtval2 : \", this.props.isWritePropValue);\r\n        }\r\n\r\n        if(this.props.isWritePropValue) {            \r\n        \r\n            // prop으로 써야할 경우 state Value를 prop Value로 초기화\r\n            this.value = this.propValue;\r\n            this.stateValue = this.propValue;\r\n\r\n            return true;\r\n        }\r\n        else {\r\n            this.value = this.stateValue;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    render() {\r\n        this.checkRenderValue();\r\n        \r\n        return(\r\n            <input type=\"text\" className=\"tTxt2\" value={this.value} onChange={this.onChange} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default TextField;",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":5,"column":10,"nodeType":"57","messageId":"58","endLine":5,"endColumn":19},{"ruleId":"59","severity":1,"message":"60","line":6,"column":12,"nodeType":"61","messageId":"62","endLine":6,"endColumn":13},{"ruleId":"55","severity":1,"message":"63","line":33,"column":7,"nodeType":"57","messageId":"58","endLine":33,"endColumn":12},{"ruleId":"55","severity":1,"message":"64","line":1,"column":17,"nodeType":"57","messageId":"58","endLine":1,"endColumn":26},{"ruleId":"55","severity":1,"message":"65","line":8,"column":7,"nodeType":"57","messageId":"58","endLine":8,"endColumn":19},{"ruleId":"55","severity":1,"message":"66","line":9,"column":7,"nodeType":"57","messageId":"58","endLine":9,"endColumn":20},{"ruleId":"67","severity":1,"message":"68","line":41,"column":39,"nodeType":"69","messageId":"70","endLine":41,"endColumn":41},{"ruleId":"67","severity":1,"message":"68","line":43,"column":49,"nodeType":"69","messageId":"70","endLine":43,"endColumn":51},{"ruleId":"71","severity":1,"message":"72","line":135,"column":38,"nodeType":"69","messageId":"73","endLine":148,"endColumn":12},{"ruleId":"74","severity":1,"message":"75","line":167,"column":41,"nodeType":"76","messageId":"77","endLine":167,"endColumn":43},{"ruleId":"67","severity":1,"message":"68","line":169,"column":43,"nodeType":"69","messageId":"70","endLine":169,"endColumn":45},{"ruleId":"67","severity":1,"message":"68","line":171,"column":53,"nodeType":"69","messageId":"70","endLine":171,"endColumn":55},{"ruleId":"55","severity":1,"message":"78","line":229,"column":11,"nodeType":"57","messageId":"58","endLine":229,"endColumn":14},{"ruleId":"55","severity":1,"message":"79","line":357,"column":9,"nodeType":"57","messageId":"58","endLine":357,"endColumn":13},{"ruleId":"67","severity":1,"message":"80","line":439,"column":68,"nodeType":"69","messageId":"81","endLine":439,"endColumn":70},{"ruleId":"82","severity":1,"message":"83","line":136,"column":16,"nodeType":"76","messageId":"84","endLine":136,"endColumn":51},{"ruleId":"85","severity":1,"message":"86","line":196,"column":41,"nodeType":"87","messageId":"88","endLine":196,"endColumn":52},{"ruleId":"74","severity":1,"message":"75","line":272,"column":29,"nodeType":"76","messageId":"77","endLine":272,"endColumn":31},{"ruleId":"74","severity":1,"message":"75","line":334,"column":28,"nodeType":"76","messageId":"77","endLine":334,"endColumn":30},{"ruleId":"55","severity":1,"message":"89","line":352,"column":29,"nodeType":"57","messageId":"58","endLine":352,"endColumn":34},{"ruleId":"74","severity":1,"message":"75","line":362,"column":27,"nodeType":"76","messageId":"77","endLine":362,"endColumn":29},{"ruleId":"55","severity":1,"message":"89","line":369,"column":29,"nodeType":"57","messageId":"58","endLine":369,"endColumn":34},{"ruleId":"74","severity":1,"message":"75","line":430,"column":28,"nodeType":"76","messageId":"77","endLine":430,"endColumn":30},{"ruleId":"74","severity":1,"message":"75","line":439,"column":27,"nodeType":"76","messageId":"77","endLine":439,"endColumn":29},{"ruleId":"55","severity":1,"message":"89","line":450,"column":29,"nodeType":"57","messageId":"58","endLine":450,"endColumn":34},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'createRow' is defined but never used.","Identifier","unusedVar","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'rows1' is assigned a value but never used.","'useEffect' is defined but never used.","'SMALL_HEIGHT' is assigned a value but never used.","'NORMAL_HEIGHT' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'index'.","unsafeRefs","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'key' is assigned a value but never used.","'rows' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-self-compare","Comparing to itself is potentially pointless.","comparingToSelf","valid-typeof","Invalid typeof comparison value.","Literal","invalidValue","'value' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]